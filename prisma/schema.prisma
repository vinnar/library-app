generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DB_URL")
}

model User {
    id            Int           @id @default(autoincrement())
    name          String
    email         String?       @unique
    type          UserType      @default(BORROWER)
    status        UserStatus    @default(ACTIVE)
    image         String?
    emailVerified DateTime?
    createdAt     DateTime      @default(now())
    updatedAt     DateTime      @updatedAt
    transactions  Transaction[]
    Account       Account[]
    Session       Session[]
}

model Book {
    id           Int           @id @default(autoincrement())
    isbn         String        
    name         String
    description  String
    bookAuthor   BookAuthor[]
    publishedAt  String
    createdAt    DateTime      @default(now())
    updatedAt    DateTime      @updatedAt
    transactions Transaction[]
}

model Author {
    id         Int          @id @default(autoincrement())
    name       String
    bookAuthor BookAuthor[]
    createdAt  DateTime     @default(now())
    updatedAt  DateTime     @updatedAt
}

model BookAuthor {
    id        Int      @id @default(autoincrement())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    bookId    Int
    book      Book     @relation(fields: [bookId], references: [id])
    authorId  Int
    author    Author   @relation(fields: [authorId], references: [id])
}

model Transaction {
    id            Int             @id @default(autoincrement())
    type          TransactionType
    userId        Int
    bookId        Int
    user          User            @relation(fields: [userId], references: [id])
    book          Book            @relation(fields: [bookId], references: [id])
    transactionAt DateTime        @default(now())
}

enum UserType {
    BORROWER
    ADMIN
}

enum UserStatus {
    ACTIVE
    INACTIVE
    BLOCKED
}

enum TransactionType {
    BORROW
    RETURN
    LOST
}

model Account {
    id                Int     @id @default(autoincrement())
    userId            Int
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id])

    @@unique([provider, providerAccountId])
}

model Session {
    id           Int      @id @default(autoincrement())
    sessionToken String   @unique
    userId       Int
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
